{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/ui/Input/Input.js","components/ui/Input/Input.module.css"],"names":["module","exports","Auth","state","formIsValid","controls","email","elementType","elementConfig","type","placeholder","value","valid","validation","required","touched","password","isSignUp","inputChangeHandler","event","inputIdentifier","updatedInputElement","updateObject","target","checkValidity","updatedControls","formElementIdentifier","setState","handleFormSubmit","preventDefault","props","onAuth","handleSignUpMode","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","onSubmit","map","formElement","invalid","shouldValidate","changed","disabled","clicked","orderHandler","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","Component","connect","auth","token","bgrBldr","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,wKCU9CC,E,4MAEFC,MAAM,CACFC,aAAa,EACbC,SAAU,CACNC,MAAO,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,sBAEjBC,MAAO,GACPC,OAAO,EACPC,WAAY,CACRC,UAAU,GAEdC,SAAS,GAEbC,SAAU,CACNT,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,YAEjBC,MAAO,GACPC,OAAO,EACPC,WAAY,CACRC,UAAU,GAEdC,SAAS,IAGjBE,UAAU,G,EASdC,mBAAqB,SAACC,EAAOC,GACzB,IAAMC,EAAsBC,YAAa,EAAKnB,MAAME,SAASe,GAAkB,CAC3ET,MAAOQ,EAAMI,OAAOZ,MACpBC,MAAOY,YAAcL,EAAMI,OAAOZ,MAAO,EAAKR,MAAME,SAASe,GAAiBP,YAC9EE,SAAS,IAGPU,EAAkBH,YAAa,EAAKnB,MAAME,SAAZ,eAC/Be,EAAkBC,IAGnBjB,GAAc,EAClB,IAAI,IAAIsB,KAAyBD,EAC7BrB,EAAcqB,EAAgBC,GAAuBd,OAASR,EAGlE,EAAKuB,SAAS,CACVtB,SAAUoB,EACVrB,YAAaA,K,EAIrBwB,iBAAmB,SAACT,GAChBA,EAAMU,iBACN,EAAKC,MAAMC,OAAO,EAAK5B,MAAME,SAASC,MAAMK,MAAO,EAAKR,MAAME,SAASW,SAASL,MAAO,EAAKR,MAAMc,W,EAGtGe,iBAAmB,WACf,EAAKL,UAAS,SAAAM,GACV,MAAO,CAAChB,UAAWgB,EAAUhB,c,kEAlC7BiB,KAAKJ,MAAMK,gBAAkD,MAAhCD,KAAKJ,MAAMM,kBACxCF,KAAKJ,MAAMO,0B,+BAqCT,IAAD,OACCC,EAAoB,GAE1B,IAAK,IAAIC,KAAOL,KAAK/B,MAAME,SACvBiC,EAAkBE,KAAK,CACnBC,GAAIF,EACJG,OAAQR,KAAK/B,MAAME,SAASkC,KAIpC,IAAII,EACA,0BAAMC,SAAUV,KAAKN,kBAChBU,EAAkBO,KAAI,SAAAC,GAAW,OAAI,kBAAC,IAAD,CAC9BP,IAAKO,EAAYL,GACjBlC,YAAauC,EAAYJ,OAAOnC,YAChCC,cAAesC,EAAYJ,OAAOlC,cAClCG,MAAOmC,EAAYJ,OAAO/B,MAC1BoC,SAAUD,EAAYJ,OAAO9B,MAC7BoC,eAAgBF,EAAYJ,OAAO7B,WACnCE,QAAS+B,EAAYJ,OAAO3B,QAC5BkC,QAAS,SAAC9B,GAAD,OAAW,EAAKD,mBAAmBC,EAAM2B,EAAYL,UAGtE,kBAAC,IAAD,CAAQS,UAAWhB,KAAK/B,MAAMC,YAAaK,KAAK,UAAU0C,QAASjB,KAAKkB,cAAxE,WAILlB,KAAKJ,MAAMuB,UACVV,EAAO,kBAAC,IAAD,OAGX,IAAIW,EAAe,KAChBpB,KAAKJ,MAAMyB,QACVD,EAAe,2BAAIpB,KAAKJ,MAAMyB,MAAMC,UAGxC,IAAIC,EAAe,KAKnB,OAJGvB,KAAKJ,MAAM4B,kBACVD,EAAe,kBAAC,IAAD,CAAUE,GAAIzB,KAAKJ,MAAMM,oBAIxC,yBAAKwB,UAAWC,IAAQ3D,MACnBuD,EACAH,EACAX,EACD,kBAAC,IAAD,CAAQlC,KAAK,SAAS0C,QAASjB,KAAKF,kBAApC,aAAiEE,KAAK/B,MAAMc,SAAW,UAAY,UAAnG,U,GAxHG6C,aA+IJC,uBAjBS,SAAA5D,GACpB,MAAO,CACHkD,QAASlD,EAAM6D,KAAKX,QACpBE,MAAOpD,EAAM6D,KAAKT,MAClBG,gBAAsC,OAArBvD,EAAM6D,KAAKC,MAC5B9B,eAAgBhC,EAAM+D,QAAQC,SAC9B/B,iBAAkBjC,EAAM6D,KAAK5B,qBAIV,SAAAgC,GACvB,MAAO,CACHrC,OAAQ,SAACzB,EAAOU,EAAUC,GAAlB,OAA+BmD,EAASC,IAAa/D,EAAOU,EAAUC,KAC9EoB,sBAAuB,kBAAM+B,EAASC,IAA4B,UAI3DN,CAA6C7D,I,gCC1J5D,qCA8DeoE,IA1DD,SAACxC,GAEX,IAAIyC,EAAe,KAEfC,EAAe,CAACX,IAAQY,cAM5B,OAJG3C,EAAMiB,SAAWjB,EAAMkB,gBAAkBlB,EAAMf,SAC9CyD,EAAahC,KAAKqB,IAAQa,SAGvB5C,EAAMvB,aACT,IAAK,QACDgE,EAAe,yCACXX,UAAWY,EAAaG,KAAK,MACzB7C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACbiE,SAAU9C,EAAMmB,WAEpB,MACJ,IAAK,WACDsB,EAAe,4CACXX,UAAWY,EAAaG,KAAK,MACzB7C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACbiE,SAAU9C,EAAMmB,WAEpB,MACJ,IAAK,SACDsB,EAAe,4BACXX,UAAWY,EAAaG,KAAK,KAC7BhE,MAAOmB,EAAMnB,MACbiE,SAAU9C,EAAMmB,SAEfnB,EAAMtB,cAAcqE,QAAQhC,KAAI,SAAAiC,GAAM,OACnC,4BACIvC,IAAKuC,EAAOnE,MACZA,MAAOmE,EAAOnE,OACbmE,EAAOC,kBAGpB,MACJ,QACIR,EAAe,yCACXX,UAAWY,EAAaG,KAAK,MACzB7C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACbiE,SAAU9C,EAAMmB,WAI5B,OACI,yBAAKW,UAAWC,IAAQmB,OACpB,2BAAOpB,UAAWC,IAAQoB,OAAQnD,EAAMoD,OACvCX,K,mBCxDbvE,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU","file":"static/js/4.8a29b29b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2H0ED\",\"Input\":\"Auth_Input__2onMq\"};","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport classes from './Auth.module.css'\r\nimport Input from '../../components/ui/Input/Input'\r\nimport Button from '../../components/ui/Button/Button'\r\nimport Spinner from '../../components/ui/Spinner/Spinner'\r\nimport * as actions from '../../store/actions/index'\r\nimport {updateObject, checkValidity} from '../../shared/utility'\r\n\r\nclass Auth extends Component {\r\n\r\n    state={\r\n        formIsValid: false,\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email Address'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true\r\n                },\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true\r\n                },\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangeHandler = (event, inputIdentifier) => {\r\n        const updatedInputElement = updateObject(this.state.controls[inputIdentifier], { //Object Deep Cloning\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.controls[inputIdentifier].validation),\r\n            touched: true\r\n        })\r\n\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [inputIdentifier]: updatedInputElement\r\n        })\r\n\r\n        let formIsValid = true;\r\n        for(let formElementIdentifier in updatedControls) {\r\n            formIsValid = updatedControls[formElementIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            controls: updatedControls,\r\n            formIsValid: formIsValid\r\n        })\r\n    }\r\n\r\n    handleFormSubmit = (event) => {\r\n        event.preventDefault(); // to prevent page reloading\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\r\n    }\r\n\r\n    handleSignUpMode = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.handleFormSubmit}>\r\n                {formElementsArray.map(formElement => <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangeHandler(event,formElement.id)}\r\n                    />\r\n                )}\r\n                <Button disabled={!this.state.formIsValid} type=\"Success\" clicked={this.orderHandler}>SUBMIT</Button>\r\n            </form>\r\n        );\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error) {\r\n            errorMessage = <p>{this.props.error.message}</p>\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                {form}\r\n                <Button type='Danger' clicked={this.handleSignUpMode}>SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'} </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.bgrBldr.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react'\r\n\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n\r\n    let inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}\r\n            />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}\r\n            />;\r\n            break;\r\n        case('select'):\r\n            inputElement = <select \r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n            >\r\n                {props.elementConfig.options.map(option => \r\n                    <option\r\n                        key={option.value}\r\n                        value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>)}\r\n            </select>;\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}\r\n            />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__36Cot\",\"Label\":\"Input_Label__2FNn6\",\"InputElement\":\"Input_InputElement__3q0LN\",\"Invalid\":\"Input_Invalid__27vn7\"};"],"sourceRoot":""}
{"version":3,"sources":["components/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/ui/Input/Input.js","components/ui/Input/Input.module.css","components/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","type","clicked","checkoutCancelled","checkoutContinued","ContactData","state","formIsValid","orderForm","name","elementType","elementConfig","placeholder","value","valid","validation","required","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","selected","inputChangeHandler","event","inputIdentifier","updatedInputElement","updateObject","target","checkValidity","updatedOrderForm","formElementIdentifier","setState","orderHandler","preventDefault","formData","order","ings","price","toFixed","orderData","userId","onPurchaseBurger","token","formElementsArray","key","this","push","id","config","form","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","bgrBldr","totalPrice","error","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.b6b68107.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport Burger from '../Burger/Burger'\r\nimport classes from './CheckoutSummary.module.css'\r\nimport Button from '../ui/Button/Button'\r\n\r\nconst checkoutSummary = (props) => {\r\n    return(\r\n        <div className={classes.CheckoutSummary}>\r\n            <h2>We hope your burger tastes well!</h2>\r\n            <div style={{width:\"100%\", margin:\"auto\"}}>\r\n                <Burger  ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                type=\"Danger\"\r\n                clicked={props.checkoutCancelled}>\r\n                    CANCEL\r\n            </Button>\r\n            <Button\r\n                type=\"Success\"\r\n                clicked={props.checkoutContinued}>\r\n                    CONTINUE\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport Button from '../../../components/ui/Button/Button'\r\nimport classes from './ContactData.module.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/ui/Spinner/Spinner'\r\nimport Input from '../../../components/ui/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as orderActions from '../../../store/actions/index'\r\nimport {updateObject, checkValidity} from '../../../shared/utility'\r\n\r\nclass ContactData extends Component {\r\n    state={\r\n        formIsValid: false,\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true\r\n                },\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true\r\n                },\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Postal Code'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 4,\r\n                    maxLength: 6\r\n                },\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true\r\n                },\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                valid: false,\r\n                validation: {\r\n                    required: true\r\n                },\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest', selected: true},\r\n                        {value: 'cheapest', displayValue: 'Cheapest', selected: false}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                valid: true,\r\n                validation: {}\r\n            }\r\n        }\r\n    }\r\n\r\n    inputChangeHandler = (event, inputIdentifier) => {\r\n        const updatedInputElement = updateObject(this.state.orderForm[inputIdentifier], { //Object Deep Cloning\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        })\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedInputElement\r\n        })\r\n\r\n        let formIsValid = true;\r\n        for(let formElementIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[formElementIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formIsValid: formIsValid\r\n        })\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {}\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price.toFixed(2),\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onPurchaseBurger(order, this.props.token);\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        let form = (\r\n            <form>\r\n                {formElementsArray.map(formElement => <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangeHandler(event,formElement.id)}\r\n                    />\r\n                )}\r\n                <Button disabled={!this.state.formIsValid} type=\"Success\" clicked={this.orderHandler}>ORDER</Button>\r\n            </form>\r\n        );\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your contact details</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.bgrBldr.ingredients,\r\n        price: state.bgrBldr.totalPrice,\r\n        loading: state.order.loading,\r\n        error: state.order.error,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onPurchaseBurger: (orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nimport CheckoutSummary from '../../components/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from './ContactData/ContactData'\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.push('/checkout/contact-details');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ingredients) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ingredients}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-details'}\r\n                        component={ContactData} />\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.bgrBldr.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react'\r\n\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n\r\n    let inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}\r\n            />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}\r\n            />;\r\n            break;\r\n        case('select'):\r\n            inputElement = <select \r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n            >\r\n                {props.elementConfig.options.map(option => \r\n                    <option\r\n                        key={option.value}\r\n                        value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>)}\r\n            </select>;\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}\r\n            />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__36Cot\",\"Label\":\"Input_Label__2FNn6\",\"InputElement\":\"Input_InputElement__3q0LN\",\"Invalid\":\"Input_Invalid__27vn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__24Y8g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3uj1Z\",\"Input\":\"ContactData_Input__qivNO\"};"],"sourceRoot":""}